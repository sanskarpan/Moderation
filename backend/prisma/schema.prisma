generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid())
  clerkId           String           @unique
  email             String           @unique
  username          String           @unique
  role              Role             @default(USER)
  emailNotification Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  comments          Comment[]
  flaggedContents   FlaggedContent[]
  posts             Post[]
  reviews           Review[]
}

model Post {
  id        String    @id @default(uuid())
  title     String
  content   String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews   Review[]
}

model Comment {
  id             String          @id @default(uuid())
  content        String
  userId         String
  postId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  post           Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  flaggedContent FlaggedContent?
}

model Review {
  id             String          @id @default(uuid())
  content        String
  rating         Int
  userId         String
  postId         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  flaggedContent FlaggedContent?
  post           Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FlaggedContent {
  id        String           @id @default(uuid())
  contentId String
  type      ContentType
  status    ModerationStatus @default(PENDING)
  reason    String
  userId    String
  commentId String?          @unique
  reviewId  String?          @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  comment   Comment?         @relation(fields: [commentId], references: [id])
  review    Review?          @relation(fields: [reviewId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum ContentType {
  COMMENT
  REVIEW
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}
